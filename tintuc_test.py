import logging
import time
import tempfile
import subprocess
import json
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler
from webdriver_manager.chrome import ChromeDriverManager
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type

# Telegram Bot Token
TG_BOT_ACCESS_TOKEN = '7370288287:AAEGJlx_o36SifDl5Q1XujSLAocUfysUb4U'  # üî¥ Thay b·∫±ng token th·∫≠t

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# File ƒë·ªÉ l∆∞u danh s√°ch b√†i vi·∫øt ƒë√£ g·ª≠i
SENT_ARTICLES_FILE = "sent_articles.json"

# Danh s√°ch l∆∞u b√†i vi·∫øt ƒë√£ g·ª≠i
sent_articles = set()

# H√†m ƒë·ªçc danh s√°ch b√†i vi·∫øt ƒë√£ g·ª≠i t·ª´ file
def load_sent_articles():
    global sent_articles
    if os.path.exists(SENT_ARTICLES_FILE):
        with open(SENT_ARTICLES_FILE, 'r') as f:
            sent_articles.update(json.load(f))

# H√†m l∆∞u danh s√°ch b√†i vi·∫øt ƒë√£ g·ª≠i v√†o file
def save_sent_articles():
    with open(SENT_ARTICLES_FILE, 'w') as f:
        json.dump(list(sent_articles), f)

# H√†m d·ª´ng c√°c ti·∫øn tr√¨nh Chrome/Chromedriver
def kill_chrome_processes():
    try:
        subprocess.run(["pkill", "-9", "chrome"], check=False)
        subprocess.run(["pkill", "-9", "chromedriver"], check=False)
        time.sleep(1)
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ d·ª´ng ti·∫øn tr√¨nh Chrome: {e}")

# Configure Selenium WebDriver
def init_driver():
    kill_chrome_processes()
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-cache")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("user-agent=Mozilla/5.0")
    user_data_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={user_data_dir}")
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        return driver, user_data_dir
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi t·∫°o driver: {e}")
        raise

# H√†m d·ªçn d·∫πp t√†i nguy√™n
def cleanup_driver(driver, user_data_dir):
    try:
        driver.quit()
        import shutil
        shutil.rmtree(user_data_dir, ignore_errors=True)
    except Exception as e:
        logger.warning(f"L·ªói khi d·ªçn d·∫πp: {e}")

@retry(stop=stop_after_attempt(3), wait=wait_fixed(5), retry=retry_if_exception_type(Exception))
def get_latest_tintuc():
    """L·∫•y danh s√°ch 3 b√†i vi·∫øt m·ªõi nh·∫•t t·ª´ Tapchibitcoin.io"""
    driver = None
    user_data_dir = None
    try:
        driver, user_data_dir = init_driver()
        driver.get("https://tapchibitcoin.io")
        wait = WebDriverWait(driver, 15)
        articles = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, "entry-title")))[:3]

        latest_articles = []
        for article in articles:
            try:
                title = article.find_element(By.TAG_NAME, "a").get_attribute("title")
                link = article.find_element(By.TAG_NAME, "a").get_attribute("href")

                if "[QC]" in title or "qu·∫£ng c√°o" in title.lower():
                    logger.info(f"üî¥ B·ªè qua b√†i vi·∫øt qu·∫£ng c√°o: {title}")
                    continue

                if link in sent_articles:
                    continue

                description, image_url = get_article_details(link)
                if not description:
                    logger.info(f"‚ö†Ô∏è B·ªè qua b√†i vi·∫øt kh√¥ng c√≥ m√¥ t·∫£: {title}")
                    continue

                article_info = f"üì∞ *{title}*\n\n{description}\n[ƒê·ªçc th√™m]({link})\n\n@onusfuture"
                latest_articles.append((title, article_info, image_url, link))
            except Exception as e:
                logger.error(f"L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt: {e}")
                continue

        return latest_articles
    finally:
        if driver:
            cleanup_driver(driver, user_data_dir)

@retry(stop=stop_after_attempt(3), wait=wait_fixed(5), retry=retry_if_exception_type(Exception))
def get_article_details(url):
    """L·∫•y chi ti·∫øt b√†i vi·∫øt (m√¥ t·∫£ v√† ·∫£nh)"""
    driver = None
    user_data_dir = None
    try:
        driver, user_data_dir = init_driver()
        driver.get(url)
        wait = WebDriverWait(driver, 20)

        # Cu·ªôn trang ƒë·ªÉ t·∫£i n·ªôi dung ƒë·ªông
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)

        # L·∫•y m√¥ t·∫£
        try:
            content_div = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "td-post-content")))
            paragraphs = content_div.find_elements(By.TAG_NAME, "p")
            description = "\n".join([p.text.strip() for p in paragraphs[:2] if p.text.strip()])
            if not description:
                return None, None
        except:
            return None, None

        # L·∫•y ·∫£nh
        try:
            image_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "img.attachment-large")))
            image_url = image_element.get_attribute("src")
        except:
            image_url = None

        return description, image_url
    finally:
        if driver:
            cleanup_driver(driver, user_data_dir)

async def send_latest_tintuc(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    try:
        new_articles = get_latest_tintuc()
        for title, article_text, image_url, link in new_articles:
            if link not in sent_articles:
                sent_articles.add(link)
                save_sent_articles()

                buttons = [
                    [InlineKeyboardButton("‚úçÔ∏è ƒêƒÇNG K√ù ONUS NH·∫¨N 270K", url="https://signup.goonus.io/6277729708298887070?utm_campaign=invite")],
                    [
                        InlineKeyboardButton("üôãH∆∞·ªõng d·∫´n", url="https://youtu.be/uS2AsvN1kUY?si=cXWj3prCKLpM6876"),
                        InlineKeyboardButton("Zalo h·ªó tr·ª£", url="https://zalo.me/0962804956")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)

                if image_url:
                    try:
                        await context.bot.send_photo(chat_id=chat_id, photo=image_url, caption=article_text, parse_mode="Markdown", reply_markup=reply_markup)
                    except Exception as e:
                        logger.warning(f"L·ªói khi g·ª≠i ·∫£nh: {e}")
                        await context.bot.send_message(chat_id=chat_id, text=article_text, parse_mode="Markdown", reply_markup=reply_markup)
                else:
                    await context.bot.send_message(chat_id=chat_id, text=article_text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i tin t·ª©c: {e}")

async def tintuc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    load_sent_articles()
    context.job_queue.run_repeating(send_latest_tintuc, interval=60, first=1, chat_id=chat_id)
    await update.message.reply_text("ƒê√£ b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t tin t·ª©c t·ª´ Tapchibitcoin.io!")

if __name__ == '__main__':
    application = ApplicationBuilder().token(TG_BOT_ACCESS_TOKEN).build()
    tintuc_handler = CommandHandler('tintuc', tintuc)
    application.add_handler(tintuc_handler)
    logger.info("Bot ƒëang kh·ªüi ƒë·ªông...")
    application.run_polling()
