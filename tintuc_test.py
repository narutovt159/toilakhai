import logging
import tempfile
import subprocess
import time
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler
from webdriver_manager.chrome import ChromeDriverManager
import atexit
import os

# Telegram Bot Token
TG_BOT_ACCESS_TOKEN = '7370288287:AAEGJlx_o36SifDl5Q1XujSLAocUfysUb4U'  # Thay b·∫±ng token th·∫≠t

# C·∫•u h√¨nh logging chi ti·∫øt, ghi v√†o file
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', mode='a'),
        logging.StreamHandler()
    ]
)

# Danh s√°ch l∆∞u b√†i vi·∫øt ƒë√£ g·ª≠i
sent_articles = set()

# Theo d√µi th∆∞ m·ª•c t·∫°m ƒë·ªÉ d·ªçn d·∫πp
temp_dirs = []

def cleanup_temp_dirs():
    """D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m t·∫°o cho WebDriver."""
    for temp_dir in temp_dirs:
        try:
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
                logging.info(f"ƒê√£ d·ªçn th∆∞ m·ª•c t·∫°m: {temp_dir}")
        except Exception as e:
            logging.error(f"L·ªói khi d·ªçn {temp_dir}: {e}")

# ƒêƒÉng k√Ω h√†m d·ªçn d·∫πp khi ch∆∞∆°ng tr√¨nh k·∫øt th√∫c
atexit.register(cleanup_temp_dirs)

def kill_chrome_processes():
    """D·ª´ng c√°c ti·∫øn tr√¨nh Chrome v√† ChromeDriver."""
    try:
        subprocess.run(["pkill", "-9", "chrome"], check=False)
        subprocess.run(["pkill", "-9", "chromedriver"], check=False)
        time.sleep(2)  # ƒê·ª£i l√¢u h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o ti·∫øn tr√¨nh d·ª´ng
        logging.info("ƒê√£ d·ª´ng ti·∫øn tr√¨nh Chrome v√† ChromeDriver")
    except Exception as e:
        logging.error(f"L·ªói khi d·ª´ng ti·∫øn tr√¨nh Chrome: {e}")

def init_driver():
    """Kh·ªüi t·∫°o Selenium WebDriver v·ªõi d·ªçn d·∫πp h·ª£p l√Ω."""
    kill_chrome_processes()
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-cache")
    chrome_options.add_argument("--disable-extensions")
    
    # T·∫°o th∆∞ m·ª•c t·∫°m v√† theo d√µi
    user_data_dir = tempfile.mkdtemp()
    temp_dirs.append(user_data_dir)
    chrome_options.add_argument(f"--user-data-dir={user_data_dir}")
    
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        logging.info("Kh·ªüi t·∫°o WebDriver th√†nh c√¥ng")
        return driver
    except Exception as e:
        logging.error(f"L·ªói kh·ªüi t·∫°o WebDriver: {e}")
        raise

def get_latest_tintuc():
    """L·∫•y 10 b√†i vi·∫øt m·ªõi nh·∫•t t·ª´ Tapchibitcoin.io."""
    driver = None
    try:
        driver = init_driver()
        driver.get("https://tapchibitcoin.io")
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CLASS_NAME, "entry-title"))
        )  # TƒÉng th·ªùi gian ch·ªù

        articles = driver.find_elements(By.CLASS_NAME, "entry-title")[:10]
        latest_articles = []

        for article in articles:
            try:
                title = article.find_element(By.TAG_NAME, "a").get_attribute("title")
                link = article.find_element(By.TAG_NAME, "a").get_attribute("href")

                # B·ªè qua qu·∫£ng c√°o
                if "[QC]" in title or "qu·∫£ng c√°o" in title.lower():
                    logging.info(f"B·ªè qua b√†i qu·∫£ng c√°o: {title}")
                    continue

                # B·ªè qua b√†i ƒë√£ g·ª≠i
                if title in sent_articles:
                    continue

                # L·∫•y chi ti·∫øt b√†i vi·∫øt
                driver.get(link)
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "td-post-content"))
                )

                content_div = driver.find_element(By.CLASS_NAME, "td-post-content")
                description = content_div.find_element(By.TAG_NAME, "p").text if content_div else ""

                # L·∫•y ·∫£nh
                image_url = None
                try:
                    image_meta = driver.find_element(By.XPATH, "//meta[@property='og:image']")
                    image_url = image_meta.get_attribute("content")
                except:
                    pass

                article_info = f"üì∞ *{title}*\n\n{description}\n[ƒê·ªçc th√™m]({link})\n\n@onusfuture"
                latest_articles.append((title, article_info, image_url, link))
            except Exception as e:
                logging.error(f"L·ªói x·ª≠ l√Ω b√†i vi·∫øt {title}: {e}")
                continue

        return latest_articles
    except Exception as e:
        logging.error(f"L·ªói l·∫•y tin t·ª©c: {e}")
        return []
    finally:
        if driver:
            try:
                driver.quit()
                logging.info("ƒê√£ ƒë√≥ng WebDriver")
            except Exception as e:
                logging.error(f"L·ªói ƒë√≥ng WebDriver: {e}")

async def send_latest_tintuc(context: ContextTypes.DEFAULT_TYPE):
    """G·ª≠i b√†i vi·∫øt m·ªõi ƒë·∫øn chat."""
    chat_id = context.job.chat_id
    try:
        new_articles = get_latest_tintuc()
        if not new_articles:
            logging.info("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt m·ªõi")
            return

        for title, article_text, image_url, link in new_articles:
            if title not in sent_articles:
                sent_articles.add(title)
                buttons = [
                    [InlineKeyboardButton("‚úçÔ∏è ƒêƒÇNG K√ù ONUS NH·∫¨N 270K", url="https://signup.goonus.io/6277729708298887070?utm_campaign=invite")],
                    [
                        InlineKeyboardButton("üôãH∆∞·ªõng d·∫´n", url="https://youtu.be/uS2AsvN1kUY?si=cXWj3prCKLpM6876"),
                        InlineKeyboardButton("Zalo h·ªó tr·ª£", url="https://zalo.me/0962804956")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)

                try:
                    if image_url:
                        await context.bot.send_photo(chat_id=chat_id, photo=image_url, caption=article_text, parse_mode="Markdown", reply_markup=reply_markup)
                    else:
                        await context.bot.send_message(chat_id=chat_id, text=article_text, parse_mode="Markdown", reply_markup=reply_markup)
                    logging.info(f"ƒê√£ g·ª≠i b√†i vi·∫øt: {title}")
                    time.sleep(2)  # Tr√°nh gi·ªõi h·∫°n Telegram
                except Exception as e:
                    logging.error(f"L·ªói g·ª≠i b√†i vi·∫øt {title}: {e}")
    except Exception as e:
        logging.error(f"L·ªói trong send_latest_tintuc: {e}")

async def tintuc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """B·∫Øt ƒë·∫ßu c√¥ng vi·ªác l·∫•y tin t·ª©c."""
    chat_id = update.effective_chat.id
    # Ch·∫°y m·ªói 5 ph√∫t thay v√¨ 10 gi√¢y
    context.job_queue.run_repeating(send_latest_tintuc, interval=300, first=1, chat_id=chat_id)
    await update.message.reply_text("ƒê√£ b·∫Øt ƒë·∫ßu l·∫•y tin t·ª©c m·ªõi m·ªói 5 ph√∫t.")

if __name__ == '__main__':
    try:
        application = ApplicationBuilder().token(TG_BOT_ACCESS_TOKEN).build()
        tintuc_handler = CommandHandler('tintuc', tintuc)
        application.add_handler(tintuc_handler)
        logging.info("Bot ƒë√£ kh·ªüi ƒë·ªông")
        application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    except Exception as e:
        logging.error(f"Bot g·∫∑p s·ª± c·ªë: {e}")
