import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler
from webdriver_manager.chrome import ChromeDriverManager
import time

# Telegram Bot Token
TG_BOT_ACCESS_TOKEN = '7370288287:AAEGJlx_o36SifDl5Q1XujSLAocUfysUb4U'  # üî¥ Thay b·∫±ng token th·∫≠t

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)

# Danh s√°ch l∆∞u b√†i vi·∫øt ƒë√£ g·ª≠i ƒë·ªÉ tr√°nh tr√πng l·∫∑p
sent_articles = set()


# Configure Selenium WebDriver
def init_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-software-rasterizer")

    service = Service()
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver


def get_latest_tintuc():
    """L·∫•y danh s√°ch 10 b√†i vi·∫øt m·ªõi nh·∫•t t·ª´ Tapchibitcoin.io b·∫±ng Selenium"""
    try:
        driver = init_driver()
        driver.get("https://tapchibitcoin.io")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(
                (By.CLASS_NAME,
                 "entry-title")))  # ƒê·ª£i ƒë·∫øn khi c√°c b√†i vi·∫øt xu·∫•t hi·ªán

        # L·∫•y danh s√°ch b√†i vi·∫øt (ch·ªâ l·∫•y 10 b√†i ƒë·∫ßu ti√™n)
        articles = driver.find_elements(
            By.CLASS_NAME, "entry-title")[:10]  # L·∫•y 10 b√†i ƒë·∫ßu ti√™n
        latest_articles = []

        for article in articles:
            try:
                title = article.find_element(By.TAG_NAME,
                                             "a").get_attribute("title")
                link = article.find_element(By.TAG_NAME,
                                            "a").get_attribute("href")

                # üî¥ **B·ªè qua c√°c b√†i vi·∫øt ch·ª©a "[QC]" ho·∫∑c "qu·∫£ng c√°o" trong ti√™u ƒë·ªÅ**
                if "[QC]" in title or "qu·∫£ng c√°o" in title.lower():
                    logging.info(f"üî¥ B·ªè qua b√†i vi·∫øt qu·∫£ng c√°o: {title}")
                    continue

                # N·∫øu b√†i vi·∫øt n√†y ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥, b·ªè qua
                if title in sent_articles:
                    continue

                # Truy c·∫≠p b√†i vi·∫øt ƒë·ªÉ l·∫•y th√¥ng tin th√™m
                driver.get(link)
                WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located(
                        (By.CLASS_NAME,
                         "td-post-content")))  # ƒê·ª£i cho b√†i vi·∫øt t·∫£i

                # L·∫•y n·ªôi dung b√†i vi·∫øt
                content_div = driver.find_element(By.CLASS_NAME,
                                                  "td-post-content")
                description = content_div.find_element(
                    By.TAG_NAME, "p").text if content_div else ""

                # L·∫•y ·∫£nh ƒë·∫°i di·ªán (featured image) c·ªßa b√†i vi·∫øt
                image_url = None
                try:
                    image_meta = driver.find_element(
                        By.XPATH, "//meta[@property='og:image']")
                    image_url = image_meta.get_attribute("content")
                except:
                    pass

                # T·∫°o n·ªôi dung tin nh·∫Øn
                article_info = f"üì∞ *{title}*\n\n{description}\n[ƒê·ªçc th√™m]({link})\n\n@onusfuture"
                latest_articles.append((title, article_info, image_url, link))
            except Exception as e:
                logging.error(f"L·ªói khi b√†i vi·∫øt: {e}")
                continue

        driver.quit()  # ƒê√≥ng tr√¨nh duy·ªát

        return latest_articles
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y tin t·ª©c: {e}")
        return []


async def send_latest_tintuc(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    new_articles = get_latest_tintuc()  # L·∫•y danh s√°ch b√†i vi·∫øt m·ªõi

    # Ki·ªÉm tra b√†i m·ªõi, n·∫øu kh√¥ng c√≥ th√¨ b·ªè qua
    for title, article_text, image_url, link in new_articles:
        if title not in sent_articles:
            sent_articles.add(title)  # ƒê√°nh d·∫•u b√†i ƒë√£ g·ª≠i

            # Th√™m n√∫t nh·∫•n
            buttons = [
                [
                    InlineKeyboardButton(
                        "‚úçÔ∏è ƒêƒÇNG K√ù ONUS NH·∫¨N 270K",
                        url=
                        "https://signup.goonus.io/6277729708298887070?utm_campaign=invite"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üôãH∆∞·ªõng d·∫´n",
                        url="https://youtu.be/uS2AsvN1kUY?si=cXWj3prCKLpM6876"
                    ),
                    InlineKeyboardButton("Zalo h·ªó tr·ª£",
                                         url="https://zalo.me/0962804956")
                ]
            ]

            reply_markup = InlineKeyboardMarkup(buttons)

            # G·ª≠i b√†i vi·∫øt m·ªõi v·ªõi ·∫£nh (n·∫øu c√≥)
            if image_url:
                await context.bot.send_photo(chat_id=chat_id,
                                             photo=image_url,
                                             caption=article_text,
                                             parse_mode="Markdown",
                                             reply_markup=reply_markup)
            else:
                await context.bot.send_message(chat_id=chat_id,
                                               text=article_text,
                                               parse_mode="Markdown",
                                               reply_markup=reply_markup)


async def tintuc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # C·ª© m·ªói 5 gi√¢y ki·ªÉm tra xem c√≥ b√†i m·ªõi kh√¥ng
    context.job_queue.run_repeating(send_latest_tintuc,
                                    interval=10,
                                    first=1,
                                    chat_id=chat_id)


if __name__ == '__main__':
    application = ApplicationBuilder().token(TG_BOT_ACCESS_TOKEN).build()

    tintuc_handler = CommandHandler('tintuc', tintuc)
    application.add_handler(tintuc_handler)

    application.run_polling()
