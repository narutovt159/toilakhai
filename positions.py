import logging
import re
import tempfile
import subprocess
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, JobQueue

# Token Telegram c·ªßa b·∫°n
TG_BOT_ACCESS_TOKEN1 = '7917417588:AAGhjNyuw9_CXXqyb3xY8JBwP60cjkkf_cg'  # üî¥ Thay b·∫±ng token th·∫≠t

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# H√†m d·ª´ng c√°c ti·∫øn tr√¨nh Chrome/Chromedriver
def kill_chrome_processes():
    try:
        subprocess.run(["pkill", "-9", "chrome"], check=False)
        subprocess.run(["pkill", "-9", "chromedriver"], check=False)
        time.sleep(1)  # ƒê·ª£i ƒë·ªÉ ƒë·∫£m b·∫£o ti·∫øn tr√¨nh ƒë√£ d·ª´ng
    except Exception as e:
        logging.warning(f"Kh√¥ng th·ªÉ d·ª´ng ti·∫øn tr√¨nh Chrome: {e}")

# Kh·ªüi t·∫°o WebDriver
def init_driver():
    kill_chrome_processes()  # D·ª´ng ti·∫øn tr√¨nh tr∆∞·ªõc khi kh·ªüi t·∫°o
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # T·∫Øt giao di·ªán ƒë·ªì h·ªça
    chrome_options.add_argument("--no-sandbox")  # T·∫Øt sandbox ƒë·ªÉ t∆∞∆°ng th√≠ch container
    chrome_options.add_argument("--disable-dev-shm-usage")  # Gi·∫£m s·ª≠ d·ª•ng b·ªô nh·ªõ chia s·∫ª
    chrome_options.add_argument("--disable-gpu")  # T·∫Øt GPU ƒë·ªÉ gi·∫£m t·∫£i
    chrome_options.add_argument("--no-cache")  # V√¥ hi·ªáu h√≥a cache
    chrome_options.add_argument("--disable-extensions")  # T·∫Øt extensions kh√¥ng c·∫ßn thi·∫øt
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    )
    # T·∫°o th∆∞ m·ª•c t·∫°m duy nh·∫•t
    user_data_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={user_data_dir}")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    logging.info("ƒê√£ kh·ªüi t·∫°o ChromeDriver th√†nh c√¥ng.")
    return driver

def get_latest_positions():
    try:
        # Kh·ªüi t·∫°o ChromeDriver
        driver = init_driver()

        # Truy c·∫≠p trang web
        driver.get("https://goonus.io/insights/?tab=master")
        logging.info("ƒê√£ truy c·∫≠p trang web goonus.io.")

        # ƒê·ª£i t·ªëi ƒëa 15 gi√¢y
        wait = WebDriverWait(driver, 15)

        # Ki·ªÉm tra v√† l·∫•y c√°c v·ªã th·∫ø giao d·ªãch
        try:
            positions = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, "flex-grow.text-black")))
            logging.info(f"T√¨m th·∫•y {len(positions)} v·ªã th·∫ø giao d·ªãch.")
        except Exception as e:
            logging.error(f"Kh√¥ng th·ªÉ t√¨m th·∫•y v·ªã th·∫ø giao d·ªãch: {e}")
            driver.quit()
            return []

        # Ki·ªÉm tra v√† l·∫•y ph·∫ßn l√£i/l·ªó
        try:
            profit_loss_elements = wait.until(EC.presence_of_all_elements_located(
                (By.XPATH, "//div[contains(@class, 'font-semibold') and (contains(@class, 'text-danger') or contains(@class, 'text-success'))]")))
            logging.info(f"T√¨m th·∫•y {len(profit_loss_elements)} ph·∫ßn t·ª≠ l√£i/l·ªó.")
        except Exception as e:
            logging.error(f"Kh√¥ng th·ªÉ t√¨m th·∫•y ph·∫ßn l√£i/l·ªó: {e}")
            driver.quit()
            return []

        latest_positions = []
        for i, position in enumerate(positions[:8]):  # L·∫•y t·ªëi ƒëa 8 v·ªã th·∫ø
            position_text = position.text.strip()
            profit_loss_text = profit_loss_elements[i].text.strip()

            # Tr√≠ch xu·∫•t ph·∫ßn trƒÉm l√£i/l·ªó
            percentage_match = re.search(r"([-+]?\d+\.?\d*)%", profit_loss_text)
            percentage_value = float(percentage_match.group(1)) if percentage_match else 0

            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán l√£i > 20%
            if "text-success" in profit_loss_elements[i].get_attribute("class") and percentage_value > 20:
                latest_positions.append(f"{position_text} - L√£i l·ªõn ‚úÖ {profit_loss_text}")
                logging.info(f"Th√™m v·ªã th·∫ø: {position_text} - {profit_loss_text}")

        driver.quit()
        return latest_positions if latest_positions else []

    except Exception as e:
        logging.error(f"L·ªói t·ªïng qu√°t trong get_latest_positions: {str(e)}")
        if 'driver' in locals():
            driver.quit()
        return []

async def send_latest_positions(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id  # L·∫•y chat_id t·ª´ job context
    latest_positions = get_latest_positions()  # L·∫•y c√°c v·ªã th·∫ø m·ªõi nh·∫•t
    
    if latest_positions:
        # X√≥a c√°c tin nh·∫Øn c≈© n·∫øu c√≥
        if 'message_ids' in context.bot_data:
            for msg_id in context.bot_data['message_ids']:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                except Exception as e:
                    logging.error(f"L·ªói khi x√≥a tin nh·∫Øn c≈©: {e}")

        # Danh s√°ch ƒë·ªÉ l∆∞u ID c·ªßa c√°c tin nh·∫Øn m·ªõi
        new_message_ids = []

        for position in latest_positions:
            # G·ª≠i tin nh·∫Øn m·ªõi v√† l∆∞u ID
            message = await context.bot.send_message(chat_id=chat_id, text=position)
            new_message_ids.append(message.message_id)

        # C·∫≠p nh·∫≠t danh s√°ch ID tin nh·∫Øn trong context.bot_data
        context.bot_data['message_ids'] = new_message_ids

async def positions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    latest_positions = get_latest_positions()  # G·ªçi h√†m l·∫•y c√°c v·ªã th·∫ø m·ªõi nh·∫•t

    if latest_positions:
        await context.bot.send_message(chat_id=chat_id, text="\n".join(latest_positions))

    # C·∫≠p nh·∫≠t v·ªã th·∫ø m·ªõi m·ªói 20 gi√¢y
    context.job_queue.run_repeating(send_latest_positions, interval=20, first=20, chat_id=chat_id)

if __name__ == '__main__':
    # Kh·ªüi t·∫°o bot Telegram
    application = ApplicationBuilder().token(TG_BOT_ACCESS_TOKEN1).build()

    # Th√™m handler cho l·ªánh /positions
    positions_handler = CommandHandler('positions', positions)
    application.add_handler(positions_handler)

    # Ch·∫°y bot
    application.run_polling()