import logging
import tempfile
import subprocess
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler

# Telegram Bot Token
TG_BOT_ACCESS_TOKEN = '7645025545:AAGQNr3XBjsyNDU25f4DgefBDRvjYUHbNLo'  # üî¥ Thay b·∫±ng token th·∫≠t

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Danh s√°ch l∆∞u b√†i vi·∫øt ƒë√£ g·ª≠i ƒë·ªÉ tr√°nh tr√πng l·∫∑p
sent_articles = set()

# H√†m d·ª´ng c√°c ti·∫øn tr√¨nh Chrome/Chromedriver
def kill_chrome_processes():
    try:
        subprocess.run(["pkill", "-9", "chrome"], check=False)
        subprocess.run(["pkill", "-9", "chromedriver"], check=False)
        time.sleep(1)  # ƒê·ª£i ƒë·ªÉ ƒë·∫£m b·∫£o ti·∫øn tr√¨nh ƒë√£ d·ª´ng
    except Exception as e:
        logging.warning(f"Kh√¥ng th·ªÉ d·ª´ng ti·∫øn tr√¨nh Chrome: {e}")

# Kh·ªüi t·∫°o WebDriver
def init_driver():
    kill_chrome_processes()  # D·ª´ng ti·∫øn tr√¨nh tr∆∞·ªõc khi kh·ªüi t·∫°o
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # T·∫Øt giao di·ªán ƒë·ªì h·ªça
    chrome_options.add_argument("--no-sandbox")  # T·∫Øt sandbox ƒë·ªÉ t∆∞∆°ng th√≠ch container
    chrome_options.add_argument("--disable-dev-shm-usage")  # Gi·∫£m s·ª≠ d·ª•ng b·ªô nh·ªõ chia s·∫ª
    chrome_options.add_argument("--disable-gpu")  # T·∫Øt GPU ƒë·ªÉ gi·∫£m t·∫£i
    chrome_options.add_argument("--no-cache")  # V√¥ hi·ªáu h√≥a cache
    chrome_options.add_argument("--disable-extensions")  # T·∫Øt extensions kh√¥ng c·∫ßn thi·∫øt
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
    # T·∫°o th∆∞ m·ª•c t·∫°m duy nh·∫•t
    user_data_dir = tempfile.mkdtemp()
    chrome_options.add_argument(f"--user-data-dir={user_data_dir}")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    return driver

# L·∫•y ti√™u ƒë·ªÅ v√† li√™n k·∫øt t·ª´ trang tin t·ª©c
def get_titles_from_page():
    """L·∫•y ti√™u ƒë·ªÅ v√† li√™n k·∫øt t·ª´ https://allinstation.com/tin-tuc/"""
    driver = None
    try:
        driver = init_driver()
        logging.info("ƒêang truy c·∫≠p trang tin t·ª©c...")
        driver.get("https://allinstation.com/tin-tuc/")
        
        # Ch·ªù ph·∫ßn t·ª≠ aria-live xu·∫•t hi·ªán
        logging.info("ƒêang ch·ªù ph·∫ßn t·ª≠ aria-live...")
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '[aria-live="polite"]'))
        )

        # Cu·ªôn ƒë·ªÉ t·∫£i to√†n b·ªô n·ªôi dung
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        WebDriverWait(driver, 10).until(
            lambda driver: driver.execute_script("return document.readyState;") == "complete"
        )

        # L·∫•y b√†i vi·∫øt
        articles = driver.find_elements(By.CSS_SELECTOR, '[aria-live="polite"] div.post-item a')
        logging.info(f"S·ªë b√†i vi·∫øt t√¨m th·∫•y: {len(articles)}")
        titles_with_links = []

        for article in articles:
            try:
                title = article.text.strip()
                link = article.get_attribute("href")
                if title and link:
                    titles_with_links.append((title, link))
            except Exception as e:
                logging.error(f"L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt: {e}")
                continue

        return titles_with_links
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y ti√™u ƒë·ªÅ v√† li√™n k·∫øt: {e}")
        return []
    finally:
        if driver:
            driver.quit()

# L·∫•y ƒëo·∫°n vƒÉn th·ª© hai t·ª´ b√†i vi·∫øt
def get_second_paragraph_from_article(link):
    """L·∫•y ƒëo·∫°n vƒÉn th·ª© hai t·ª´ b√†i vi·∫øt"""
    driver = None
    try:
        driver = init_driver()
        driver.get(link)
        
        # Ch·ªù n·ªôi dung b√†i vi·∫øt t·∫£i
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '.entry-content'))
        )
        
        # L·∫•y t·∫•t c·∫£ ƒëo·∫°n vƒÉn
        content = driver.find_element(By.CSS_SELECTOR, '.entry-content')
        paragraphs = content.find_elements(By.TAG_NAME, 'p')
        
        # Ki·ªÉm tra v√† l·∫•y ƒëo·∫°n vƒÉn th·ª© hai
        if len(paragraphs) >= 2:
            second_paragraph = paragraphs[1].text.strip()
        else:
            second_paragraph = "Kh√¥ng t√¨m th·∫•y ƒëo·∫°n vƒÉn th·ª© hai."
        
        return second_paragraph
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y n·ªôi dung b√†i vi·∫øt t·ª´ {link}: {e}")
        return "Kh√¥ng th·ªÉ l·∫•y n·ªôi dung."
    finally:
        if driver:
            driver.quit()

# L·∫•y ·∫£nh n·ªïi b·∫≠t v√† ·∫£nh n·ªÅn c·ªßa b√†i vi·∫øt
def get_featured_image_and_background(link):
    """L·∫•y ·∫£nh n·ªïi b·∫≠t v√† ·∫£nh n·ªÅn c·ªßa b√†i vi·∫øt"""
    driver = None
    try:
        driver = init_driver()
        driver.get(link)
        
        # Ch·ªù n·ªôi dung b√†i vi·∫øt t·∫£i
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '.entry-content'))
        )
        
        # L·∫•y ·∫£nh n·ªïi b·∫≠t (og:image)
        image_url = None
        try:
            image_meta = driver.find_element(By.XPATH, "//meta[@property='og:image']")
            image_url = image_meta.get_attribute("content")
        except:
            image_url = None
        
        # L·∫•y ·∫£nh n·ªÅn
        background_image = None
        try:
            background_element = driver.find_element(By.CSS_SELECTOR, '.entry-content')
            background_image = background_element.value_of_css_property('background-image')
            if background_image and background_image.startswith("url"):
                background_image = background_image.split('(')[1].split(')')[0].replace('"', '').replace("'", "")
        except:
            background_image = None
        
        return image_url, background_image
    except Exception as e:
        logging.error(f"L·ªói khi l·∫•y ·∫£nh n·ªïi b·∫≠t v√† ·∫£nh n·ªÅn: {e}")
        return None, None
    finally:
        if driver:
            driver.quit()

# G·ª≠i b√†i vi·∫øt tin t·ª©c
async def send_latest_tinvit(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    new_articles = get_titles_from_page()  # L·∫•y b√†i vi·∫øt m·ªõi

    # Gi·ªõi h·∫°n ·ªü 10 b√†i ƒë·∫ßu ti√™n
    for idx, (title, link) in enumerate(new_articles[:10], 1):
        if title not in sent_articles:
            sent_articles.add(title)  # ƒê√°nh d·∫•u b√†i ƒë√£ g·ª≠i

            # L·∫•y ƒëo·∫°n vƒÉn th·ª© hai
            second_paragraph = get_second_paragraph_from_article(link)
            
            # L·∫•y ·∫£nh n·ªïi b·∫≠t v√† ·∫£nh n·ªÅn
            image_url, background_image = get_featured_image_and_background(link)

            # Th√™m n√∫t nh·∫•n
            buttons = [
                [InlineKeyboardButton("‚úçÔ∏è ƒêƒÇNG K√ù ONUS NH·∫¨N 270K", url="https://signup.goonus.io/6277729708298887070?utm_campaign=invite")],
                [
                    InlineKeyboardButton("üôãH∆∞·ªõng d·∫´n", url="https://youtu.be/uS2AsvN1kUY?si=cXWj3prCKLpM6876"),
                    InlineKeyboardButton("Zalo h·ªó tr·ª£", url="https://zalo.me/0962804956")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            # G·ª≠i b√†i vi·∫øt m·ªõi v·ªõi m√¥ t·∫£ v√† li√™n k·∫øt
            article_text = f"üì∞ *{title}*\n\n{second_paragraph}\n[ƒê·ªçc th√™m]({link})\n\n@onusfuture"
            
            # G·ª≠i ·∫£nh (n·∫øu c√≥)
            try:
                if image_url:
                    await context.bot.send_photo(chat_id=chat_id, photo=image_url, caption=article_text, parse_mode="Markdown", reply_markup=reply_markup)
                else:
                    await context.bot.send_message(chat_id=chat_id, text=article_text, parse_mode="Markdown", reply_markup=reply_markup)
            except Exception as e:
                logging.error(f"L·ªói khi g·ª≠i b√†i vi·∫øt l√™n Telegram: {e}")
                await context.bot.send_message(chat_id=chat_id, text=f"üì∞ *{title}*\n\nL·ªói khi g·ª≠i b√†i vi·∫øt, vui l√≤ng ki·ªÉm tra l·∫°i.\n[ƒê·ªçc th√™m]({link})", parse_mode="Markdown")

# H√†m cho l·ªánh "/tinvit"
async def tinvit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text("B·∫Øt ƒë·∫ßu l·∫•y b√†i vi·∫øt m·ªõi...")

    # Ki·ªÉm tra b√†i m·ªõi m·ªói 10 gi√¢y
    context.job_queue.run_repeating(send_latest_tinvit, interval=10, first=1, chat_id=chat_id)

# Ch·∫°y bot
if __name__ == '__main__':
    application = ApplicationBuilder().token(TG_BOT_ACCESS_TOKEN).build()

    tinvit_handler = CommandHandler('tinvit', tinvit)
    application.add_handler(tinvit_handler)

    logging.info("Bot ƒëang ch·∫°y...")
    application.run_polling()